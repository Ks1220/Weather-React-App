{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\weather-app-master1\\\\pages\\\\index.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport { Row } from \"react-grid-system\";\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport SearchCity from \"../components/SearchCity\";\nimport UnitToggle from \"../components/UnitToggle\";\nimport \"../styles/styles.scss\";\nvar WEATHER_API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\nvar WEATHER_API_URL = \"http://api.openweathermap.org/data/2.5\";\n\nvar Index =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Index, _React$Component);\n\n  function Index(props) {\n    var _this;\n\n    _classCallCheck(this, Index);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Index).call(this, props));\n    _this.state = {\n      activeCity: \"Kuala Lumpur\",\n      unit: \"metric\",\n      forecast: null\n    };\n    _this.APIRequest = _this.APIRequest.bind(_assertThisInitialized(_this));\n    _this.retrieveData = _this.retrieveData.bind(_assertThisInitialized(_this));\n    _this.submitHandler = _this.submitHandler.bind(_assertThisInitialized(_this));\n    _this.changeHandler = _this.changeHandler.bind(_assertThisInitialized(_this));\n    _this.toggleUnit = _this.toggleUnit.bind(_assertThisInitialized(_this));\n    _this.getDay = _this.getDay.bind(_assertThisInitialized(_this));\n    _this.formatDate = _this.formatDate.bind(_assertThisInitialized(_this));\n    return _this;\n  } // Mount original city\n\n\n  _createClass(Index, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      return _regeneratorRuntime.async(function componentDidMount$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.APIRequest(this.state.activeCity));\n\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this);\n    } // OpenWeatherMap API request\n\n  }, {\n    key: \"APIRequest\",\n    value: function APIRequest(cityName) {\n      var _this2 = this;\n\n      var forecastUrl, weatherUrl;\n      return _regeneratorRuntime.async(function APIRequest$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              forecastUrl = \"\".concat(WEATHER_API_URL, \"/forecast?q=\").concat(cityName, \"&units=\").concat(this.state.unit, \"&appid=\").concat(WEATHER_API_KEY);\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(axios.get(forecastUrl).then(function (res) {\n                _this2.retrieveData(res.data.list);\n              })[\"catch\"](function (error) {\n                console.log(error);\n              }));\n\n            case 3:\n              weatherUrl = \"\".concat(WEATHER_API_URL, \"/weather?q=\").concat(cityName, \"&units=\").concat(this.state.unit, \"&appid=\").concat(WEATHER_API_KEY);\n              axios.get(weatherUrl).then(function (res) {\n                var detail = res.data;\n\n                _this2.setState({\n                  city: detail.name,\n                  temperature: detail.main.temp,\n                  description: detail.weather[0].description,\n                  feels_like: detail.main.feels_like,\n                  humidity: detail.main.humidity,\n                  highTemp: detail.main.temp_max,\n                  lowTemp: detail.main.temp_min,\n                  country: detail.sys.country,\n                  windspeed: detail.wind.speed\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this);\n    }\n    /* Display date in the format of DD/MM/YYYY */\n\n  }, {\n    key: \"formatDate\",\n    value: function formatDate(dateData) {\n      var date = dateData.split(\" \")[0].split(\"-\");\n      return \"\".concat(date[2], \"/\").concat(date[1], \"/\").concat(date[0]);\n    } // Display the week's day for weather forecast\n\n  }, {\n    key: \"getDay\",\n    value: function getDay(date) {\n      var newDate = new Date();\n      var weekday = date * 1000;\n      return newDate.setTime(weekday);\n    }\n    /* Display weather forecast for the next five days. To simplify it, only the weather at 12 noon\n       will be displayed. */\n\n  }, {\n    key: \"retrieveData\",\n    value: function retrieveData(data) {\n      var forecastData = data.filter(function (weatherData) {\n        return weatherData.dt_txt.includes(\"12:00:00\");\n      });\n      this.setState({\n        forecast: forecastData\n      });\n    } // Change Celsius to Fahrenheit and vice versa\n\n  }, {\n    key: \"toggleUnit\",\n    value: function toggleUnit() {\n      if (this.state.unit === \"metric\") {\n        this.setState({\n          unit: \"imperial\"\n        });\n      } else {\n        this.setState({\n          unit: \"metric\"\n        });\n      }\n    }\n  }, {\n    key: \"submitHandler\",\n    value: function submitHandler(input) {\n      input.preventDefault();\n      this.APIRequest(this.state.activeCity);\n    }\n  }, {\n    key: \"changeHandler\",\n    value: function changeHandler(input) {\n      input.preventDefault();\n      this.setState({\n        activeCity: input.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var cards = \"\";\n      var id = 1;\n\n      if (this.state.forecast) {\n        cards = this.state.forecast.map(function (data) {\n          return __jsx(WeatherInfo, {\n            key: id++,\n            date: _this3.formatDate(data.dt_txt),\n            day: _this3.getDay(data.dt),\n            maxTemp: data.main.temp_max,\n            minTemp: data.main.temp_min,\n            humidity: data.main.humidity,\n            description: data.weather[0].description,\n            icon: data.weather[0].icon,\n            unit: _this3.state.unit,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122\n            },\n            __self: this\n          });\n        });\n      }\n\n      return __jsx(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, __jsx(Head, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, __jsx(\"title\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Weather Application\")), __jsx(SearchCity, {\n        changeHandler: this.changeHandler,\n        submitHandler: this.submitHandler,\n        activeCity: this.state.activeCity,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }), __jsx(CurrentWeather, {\n        city: this.state.city,\n        temperature: this.state.temperature,\n        description: this.state.description,\n        feels_like: this.state.feels_like,\n        highTemp: this.state.highTemp,\n        lowTemp: this.state.lowTemp,\n        humidity: this.state.humidity,\n        country: this.state.country,\n        windspeed: this.state.windspeed,\n        unit: this.state.unit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }), __jsx(UnitToggle, {\n        toggleUnit: this.toggleUnit,\n        unit: this.state.unit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }), __jsx(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }), __jsx(\"div\", {\n        className: \"section\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"column tile is-ancestor is-centered\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"tile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, __jsx(\"div\", {\n        className: \"tile is-child\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, __jsx(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, cards))))))));\n    }\n  }]);\n\n  return Index;\n}(React.Component);\n\nexport { Index as default };","map":{"version":3,"sources":["C:/Users/User/Desktop/weather-app-master1/pages/index.js"],"names":["React","axios","Head","Row","WeatherInfo","CurrentWeather","SearchCity","UnitToggle","WEATHER_API_KEY","WEATHER_API_URL","Index","props","state","activeCity","unit","forecast","APIRequest","bind","retrieveData","submitHandler","changeHandler","toggleUnit","getDay","formatDate","cityName","forecastUrl","get","then","res","data","list","error","console","log","weatherUrl","detail","setState","city","name","temperature","main","temp","description","weather","feels_like","humidity","highTemp","temp_max","lowTemp","temp_min","country","sys","windspeed","wind","speed","dateData","date","split","newDate","Date","weekday","setTime","forecastData","filter","weatherData","dt_txt","includes","input","preventDefault","target","value","cards","id","map","dt","icon","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport Head from \"next/head\";\nimport { Row } from \"react-grid-system\";\n\nimport WeatherInfo from \"../components/WeatherInfo\";\nimport CurrentWeather from \"../components/CurrentWeather\";\nimport SearchCity from \"../components/SearchCity\";\nimport UnitToggle from \"../components/UnitToggle\";\n\nimport \"../styles/styles.scss\";\n\nconst WEATHER_API_KEY = \"b71deb2566d82e77a5e670d0d3771d2a\";\nconst WEATHER_API_URL = \"http://api.openweathermap.org/data/2.5\";\n\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeCity: \"Kuala Lumpur\",\n      unit: \"metric\",\n      forecast: null\n    };\n    this.APIRequest = this.APIRequest.bind(this);\n    this.retrieveData = this.retrieveData.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n    this.changeHandler = this.changeHandler.bind(this);\n    this.toggleUnit = this.toggleUnit.bind(this);\n    this.getDay = this.getDay.bind(this);\n    this.formatDate = this.formatDate.bind(this);\n  }\n\n  // Mount original city\n  async componentDidMount() {\n    await this.APIRequest(this.state.activeCity);\n  }\n\n  // OpenWeatherMap API request\n  async APIRequest(cityName) {\n    const forecastUrl = `${WEATHER_API_URL}/forecast?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\n    await axios\n      .get(forecastUrl)\n      .then(res => {\n        this.retrieveData(res.data.list);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n\n    const weatherUrl = `${WEATHER_API_URL}/weather?q=${cityName}&units=${this.state.unit}&appid=${WEATHER_API_KEY}`;\n    axios.get(weatherUrl).then(res => {\n      const detail = res.data;\n      this.setState({\n        city: detail.name,\n        temperature: detail.main.temp,\n        description: detail.weather[0].description,\n        feels_like: detail.main.feels_like,\n        humidity: detail.main.humidity,\n        highTemp: detail.main.temp_max,\n        lowTemp: detail.main.temp_min,\n        country: detail.sys.country,\n        windspeed: detail.wind.speed\n      });\n    });\n  }\n\n  /* Display date in the format of DD/MM/YYYY */\n  formatDate(dateData) {\n    let date = dateData.split(\" \")[0].split(\"-\");\n    return `${date[2]}/${date[1]}/${date[0]}`;\n  }\n\n  // Display the week's day for weather forecast\n  getDay(date) {\n    let newDate = new Date();\n    const weekday = date * 1000;\n    return newDate.setTime(weekday);\n  }\n\n  /* Display weather forecast for the next five days. To simplify it, only the weather at 12 noon\n     will be displayed. */\n  retrieveData(data) {\n    const forecastData = data.filter(weatherData =>\n      weatherData.dt_txt.includes(\"12:00:00\")\n    );\n    this.setState({\n      forecast: forecastData\n    });\n  }\n\n  // Change Celsius to Fahrenheit and vice versa\n  toggleUnit() {\n    if (this.state.unit === \"metric\") {\n      this.setState({\n        unit: \"imperial\"\n      });\n    } else {\n      this.setState({\n        unit: \"metric\"\n      });\n    }\n  }\n\n  submitHandler(input) {\n    input.preventDefault();\n    this.APIRequest(this.state.activeCity);\n  }\n\n  changeHandler(input) {\n    input.preventDefault();\n    this.setState({\n      activeCity: input.target.value\n    });\n  }\n\n  render() {\n    let cards = \"\";\n    let id = 1;\n    if (this.state.forecast) {\n      cards = this.state.forecast.map(data => {\n        return (\n          <WeatherInfo\n            key={id++}\n            date={this.formatDate(data.dt_txt)}\n            day={this.getDay(data.dt)}\n            maxTemp={data.main.temp_max}\n            minTemp={data.main.temp_min}\n            humidity={data.main.humidity}\n            description={data.weather[0].description}\n            icon={data.weather[0].icon}\n            unit={this.state.unit}\n          />\n        );\n      });\n    }\n    return (\n      <div>\n        <Head>\n          <title>Weather Application</title>\n        </Head>\n        <SearchCity\n          changeHandler={this.changeHandler}\n          submitHandler={this.submitHandler}\n          activeCity={this.state.activeCity}\n        />\n        <CurrentWeather\n          city={this.state.city}\n          temperature={this.state.temperature}\n          description={this.state.description}\n          feels_like={this.state.feels_like}\n          highTemp={this.state.highTemp}\n          lowTemp={this.state.lowTemp}\n          humidity={this.state.humidity}\n          country={this.state.country}\n          windspeed={this.state.windspeed}\n          unit={this.state.unit}\n        />\n        <UnitToggle toggleUnit={this.toggleUnit} unit={this.state.unit} />\n        <br />\n        <div className=\"section\">\n          <div className=\"container\">\n            <div className=\"columns\">\n              <div className=\"column tile is-ancestor is-centered\">\n                <div className=\"tile\">\n                  <div className=\"tile is-child\">\n                    <Row>{cards}</Row>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}